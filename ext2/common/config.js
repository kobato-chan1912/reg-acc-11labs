let Config={default:null,loadDefaults:async function(){if(null!==this.default)return this.default;try{var t=await fetch(chrome.runtime.getURL("config.json"));return this.default=await t.json(),this.default}catch(t){return this.default={},this.default}},get:async function(t){return(await this.getAll())[t]},set:async function(t,e){var n=await this.getAll();return n[t]=e,await idbSet("config",n),n},getAll:async function(){try{this.default||await this.loadDefaults();var t=await idbGet("config");return this.joinObjects(this.default,t||{})}catch(t){return this.default||await this.loadDefaults(),this.default}},joinObjects:function(t,e){var n,r,o={};for(n in t)o[n]=t[n];for(r in e)o[r]=e[r];return o}},DB_NAME="ConfigDB",STORE_NAME="config",DB_VERSION=1;function openDB(){return new Promise((t,e)=>{let n=indexedDB.open(DB_NAME,DB_VERSION);n.onerror=()=>e(n.error),n.onsuccess=()=>t(n.result),n.onupgradeneeded=()=>{var t=n.result;t.objectStoreNames.contains(STORE_NAME)||t.createObjectStore(STORE_NAME)}})}function idbGet(o){return openDB().then(r=>new Promise((t,e)=>{let n=r.transaction(STORE_NAME,"readonly").objectStore(STORE_NAME).get(o);n.onsuccess=()=>t(n.result),n.onerror=()=>e(n.error)}))}function idbSet(o,i){return openDB().then(r=>new Promise((t,e)=>{let n=r.transaction(STORE_NAME,"readwrite").objectStore(STORE_NAME).put(i,o);n.onsuccess=()=>t(i),n.onerror=()=>e(n.error)}))}export{Config};
